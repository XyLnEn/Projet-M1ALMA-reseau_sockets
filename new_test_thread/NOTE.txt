Pour le serveur :
1 - choisir un leader
		-> modif tableau clients: add booléen pour signaler si leader ou non.
	- blocage structure, choix leader(change booleen) et deblocage
	- chaque thread client regarde s'il est leader: si oui mode 1 sinon mode 2 (de comportement)
	mode 2 attend sur etatJeu (pthread_cond_wait()) , mode 1 previent son leader.
	- message reçu: thread Leader correspondant bloque structure, vide tabPhrases et ecrit sa phrase (1 elem du coup); il modifie variable etatJeu (ou il appelle pthread_cond_signal()) et libere la structure.

2 - les autres threads clients (grace a pthread_cond_broadcast()) savent que la phrase est arrivée et ils l'envoient a leur client (blocage-copie-envoi-deblocage).


3/1 - lorsqu'un client repond, le thread de ce client bloque la structure et insere son couple (phrase, nbthread) dans tabPhrases puis le libere et il attend sur etatJeu (pthread_cond_wait()) .

3/2 - le thread-leader attend 40 sec avant de tenter de bloquer la structure.


4 - le thread-leader envoie la liste des phrases au leader et signale les thread-client (pthread_cond_broadcast()).

4-1 - les autres threads ne peuvent plus ecrire car bloqué mais grace a signal ils savent qu'ils peuvent utiliser une methode pour recuperer toutes les phrases (comme leader quoi!) donc ils le font et previennent leur client puis ils attendent sur etatJeu (pthread_cond_wait()).


5 - thread-leader incremente score du gagnant, inscrit dans une variable {nom gagnant, phrase gagnant, score} et change etatJeu (pthread_cond_broadcast()) puis il debloque.
	-> les threads retardataires peuvent se debloquer, plus d'impact sur resultat.



6 - tout les thread client envoient la variable a leur client, thread-pere attend 10s et recommence (blocage structure).


////////////////////////////////////

apres chaque message, verif etatJeu: si valeur fausse (?) on retourne au debut 
	-> difference var etatJeu et debutJeu


A faire: ajout dans la structure 
d'un array de struct <int,string> tabPhrases ou int = no de thread, 
d'un mutex, 
d'un pthread_cond_t etatJeu,
d'un pthread_cond_t debutJeu,

--------------------------------------------------------------------------------------

gcc Array.c Serveur.c -o Serveur.exe -lpthread; gcc Client.c -o Client.exe

$$$$$$$$$$$$$$$$$$$$$$ Alicia $$$$$$$$$$$$$$$$$$$$$$$$
si tu vois cela, j'ai un probleme avec le choix de la phrase gagnante coté client: il faudrais que tu m'envoie un truc du genre "0002~NB|message" pour que je sache comment recuperer le nb correspondant.
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$

3 types: 0000~X = pseudo
0001~X = phrase a completer
0002~X = phrase completee
0003~X -> info
	si non-leader -> deviens leader
	si leader -> fin de reception des phrases completés (plus leader apres?)
0004~X : resultat
plus?


client envoie 0000~X -> son pseudo


thread-serv: envoi a leader de 0003~go
client-leader repond: 0001~ggryguyr___hsgbug

thread-serv renvoie phrase a tous sauf leader: 0001~ggryguyr___hsgbug
autres clients repondent: 
0002~ggryguyrAAAhsgbug
0002~ggryguyrBBBhsgbug
0002~ggryguyrCCChsgbug
0002~ggryguyrDDDhsgbug
-> le thread_client correspondant va stocker cette phrase dans un tableau -> voir ligne 12

au bout de W secondes, thread-store tente de lock la structure.
quand reussi:
-envoi de toutes les phrases une par une (0002~X) au client-leader (association nb dans tab + phrase)
(vu qu'il sait qu'il est leader, il va stocker toutes ces phrases)
fin -> envoi de 0003-go
il repond: 0004~nb

-envoi de toutes les phrases une par une (0002-X) au clients ->affichage

serveur fait son boulot et envoie a tt le monde le gagnant (0004~X) il recommence (choix leader... sauf si score > 4)

creation de room: tab de serveur_t, co passe nom room
messages hors normes: redirection de room (100X~....)